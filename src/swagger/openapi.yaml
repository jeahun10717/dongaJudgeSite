openapi: 3.0.0
info:
  title: REST API DOC
  description: |
    REST API 문서
  version: 1.0.0
servers:
  - url: 'http://168.115.96.213:4000/api'

paths:
# === User ======================================================================
  /users/userMe:
    get:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: 로그인된 유저 자신의 정보
      description: 로그인도니 유저 자신의 정보를 가져온다.</br>
                  토큰이 유효하지 않으면 오류를 뱉는다.
      responses:
        '200':
          description: BearerAuth Token 으로 검증해서 있는 사람이면 그 사람 정보 출력
          content:
            application/json:
              schema:
                type: object
                example:
                  status: 200
                  result:
                    uuid: 49C3FA765CCF89EFB632FE376142194A,
                    login_type: 2,
                    login_id: kakao:2064419967,
                    auth: 1,
                    pw: null,
                    phone: 01033810954,
                    name: 성제훈,
                    email: jeahun10717@gmail.com,
                    regist_at: 2022-01-05T16:27:46.000Z,
                    student_ID: 1705645
        '401':
          $ref: '#/components/responses/401'
  /users/token:
    get:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: 로그인 확인하는 API
      description: 만료기간 reset 되며 새로운 토큰이 발행됨.
      responses:
        '200':
          description: BearerAuth Token 으로 검증해서 있는 사람이면 그 사람 정보 출력
          content:
            application/json:
              schema:
                type: object
                example:
                  status: 200
                  result:
                    token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVVUlEIjoiNDlDM0ZBNzY1Q0NGODlFRkI2MzJGRTM3NjE0MjE5NEEiLCJpYXQiOjE2NDYwMzA5NTksImV4cCI6MTY0NjYzNTc1OX0.-icHKfP1bj9qDruNL-vESs27traqR2jmeOmKQRxZESg
        '401':
          $ref: '#/components/responses/401'
  /users/exist:
    post:
      tags:
        - User
      summary: 유저가 존재하는지 확인(로그인 시 무조건 실행해야 함)
      description: 유저가 존재하면 isExist 가 true, 존재하지 않으면 false</br>
                  isExist->true 면 access_token 을 뱉어주는데 이 access_token 은 BearerAuth 에서 사용될 토큰임</br>
                  isExist->false 면 access_token 을 주지 않고 users/add 라우트를 실행해야 함
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                access_token:
                  type: string
                  description: 로그인 버튼 누르고 나오는 url 에서 받아오는 access_token 임
      responses:
        '200':
          description: response 가 200 && 이미 유저가 존재할 떄 </br> 또한 access_token 은 bearerAuth 에 넣을 토큰임
          content:
            application/json:
              schema:
                type: object
                example:
                  status: 200
                  data:
                    Auth: 1
                    isExist: true
                    access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        '400':
          $ref: '#/components/responses/400'


  /users:
    post:
      tags:
        - User
      summary: exist api 요청 이후 수행하는 등록 api
      description: /users/exist 에서 isExist 가 false 면 실행되는 api 이다.</br>
                  여기서 나머지 필드를 다 채우고 정확한 값을 요청하면 status 200 과</br>
                  BearerAuth 에서 사용된 accescc_token 을 함께 띄워준다.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                access_token:
                  type: string
                  description: /users/isExist 의 body 에서 받아온 token
                phone:
                  type: string
                  description: 회원의 전화번호
                name:
                  type: string
                  description: 회원의 이름
                email:
                  type: string
                  description: 회원의 이메일
                nick_name:
                  type: string
                  description: 회원의 닉네임
              required:
                - access_token
                - phone
                - name
                - email
                - nick_name
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                example:
                  status: 200
                  result:
                    userToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
    get:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: 유저 목록
      parameters:
        - in: query
          name: auth
          schema:
            type: string
            enum:
              - noFilter
              - admin
              - common
          description: 
            noFilter (default) -> 필터없이 모든 유저 다 보여줘야 할 때</br>admin -> 관리자 유저 전부 보여줘야 할 때</br>client -> 일반 유저 전부 보여줘야 할 때
        - in: query
          name: page
          schema:
            type: integer
          description: 0부터 시작
          required: true
        - in: query
          name: order
          schema:
            type: string
            enum: ['desc', 'asc']
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                example:
                  status: 200
                  result:
                    login_type: 2  
                    access_token:   
                    phone:  
                    name:   
                    email:  
                    student_ID:   
    put:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: 유저 수정
      description: >
        user create 부분에서 추가 입력한 부분만 update 하는 api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  description: 추가입력 때 받은 폰번호
                name:
                  type: string
                  description: 추가입력 떄 받은 이름
                email:
                  type: string
                  description: 추가입력 때 받은 이메일
                student_ID:
                  type: string
                  description: 추가입력 때 받은 학번
              required:
                - phone
                - name
                - email
                - student_ID
      responses:
        '200':
          $ref: '#/components/responses/200'

    delete:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: 회원 탈퇴(유저 본인)
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  status: 400
                  code: 0
                  msg: 아이디가 없음

  /users/admin:
    get:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: 필터를 통한 유저검색
      description: 필터 -> 유저이름, 유저이메일, 유저의 학번
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: 검색어
          required: true
        - in: query
          name: order
          schema:
            type: string
            enum:
              - desc
              - asc
            default: desc
          description: 오름차순 내림차순-> desc asc
          required: true
        - in: query
          name: filter
          schema:
            type: string
            enum:
              - name
              - email
              - student_ID
          description: 유저이름, 유저이메일, 유저의 학번
          required: true
        - in: query
          name: page
          schema:
            type: integer
          description: 페이지번호
          required: true

      responses:
        '200':
            $ref: '#/components/responses/200'
    put:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: 마스터 관리자의 다른 유저 정보 변경
      description: 마스터 관리자는 다른 유저의 정보를 모두 변경 가능</br>
                  접속한 마스터 관리자가 자신의 정보를 변경할 수 도 있음</br>
                  만약 마스터관리자가 자신의 권한을 낮추고 싶을 경우 아래의 플로우를 따름</br>
                  전체 유저중 마스터 관리자가 2명 이상일 때 -> 자신의 권한 낮추는 거 가능</br>
                  전체 유저중 마스터 관리자가 2명 미만일 때 -> 자신의 권한 낮추는 거 불가
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: 유저 식별을 위한 uuid
                auth:
                  type: string
                  description: 유저의 권한
                phone:
                  type: string
                  description: 유저의 전화번호
                name:
                  type: string
                  description: 유저의 이름
                email:
                  type: string
                  description: 유저의 이메일
                student_ID:
                  type: string
                  description: 유저의 학번 
              required:
                - uuid
                - auth
                - phone
                - name
                - email
                - student_ID

      responses:
        '200':
          $ref: '#/components/responses/200'

    delete:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: 관리자가 다른 유저 탈퇴시키는 api
      description: 관리자가 다른 유저 탈퇴시키는 api</br>
      parameters:
        - in: query
          name: uuid
          schema:
            type: string
          description: 입력 받는 uuid
          required: true

      responses:
        '200':
          $ref: '#/components/responses/200'
# === Judge ========================================================================
  /Judge:
    get:
      security:
        - BearerAuth: []
      tags:
        - Judge
      summary: 채점현황 보여주는 api
      description:   
        showFlag 는 all 과 some 이 존재.<br>all 은 페이지네이션에서 다른 필터링 없이 모든 걸 보여줘야 할 때 사용<br>some 은 prob_num 이라는 필터링을 거쳐서 페이지네이션 후 보여줌<br>여기서 showFlag 가 만약 all 이면 prob_num 에 숫자 넣어도 필터링안됨<br>필터링 하고 싶으면 무조건 showFlag == some 이고 probNum = {문제번호} 형태여야 함
      parameters:
        - in: query
          name: showFlag
          schema:
            type: string
            enum: 
              - all
              - some
          description: 만약 전체를 다 보여줘야 한다면 all 을 일부 prob_num 을 지정해서 보여줘야한다면 some 을 지정
          required: true
        - in: query
          name: probNum
          schema:
            type: integer
          description: 페이지네이션을 진행할 문제 번호 default는 -1
          required: true
        - in: query
          name: pageNum
          schema:
            type: integer
          description: 페이지 번호
          required: true
        - in: query
          name: orderForm
          schema:
            type: string
            enum:
              - desc
              - asc
              - DESC
              - ASC
            default: asc
          description: 오름차순 내림차순-> asc desc 
          required: true
        - in: query
          name: contentsCnt
          schema:
            type: integer
          description: 한페이지당 보여지는 문제 개수
          required: true

      responses:
        '200':
            $ref: '#/components/responses/200'
    post:
      security:
        - BearerAuth: []
      tags:
        - Judge
      summary: 채점 api
      description: 채점 진행하는 api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                prob_num:
                  type: integer
                  description: 문제 번호
                code:
                  type: string
                  description: 제출 소스코드
                prog_lang:
                  type: string
                  description: 프로그래밍 언어 지정
              required:
                - prob_num
                - code
                - prog_lang
      responses:
        '200':
            $ref: '#/components/responses/200'
  /Judge/{judgeUUID}:
    get:
      security:
        - BearerAuth: []
      tags:
        - Judge
      summary: 채점현황 1개 자세히 보여주는 부분
      description: judge 의 uuid 로 조회해서 채점현황 상세조회
      parameters:
        - in: path
          name: judgeUUID
          required: true
          description: this is id
          schema:
            type: integer

      responses:
        '200':
            $ref: '#/components/responses/200'

  /Judge/attack:
    post:
      security:
        - BearerAuth: []
      tags:
        - Judge
      summary: 소스 공격 방어 로직
      description: attackJudgeUUID -> 공격할 대상의 채점현황<\br>attackProbNum -> 공격할 대상의 문제번호 <\br>attackDataSet -> 공격을 진행할 inp data set
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                attackJudgeUUID:
                  type: string
                  description: 공격대상의 judge uuid
                attackProbNum:
                  type: string
                  description: 공격대상의 prob_num
                attackDataSet:
                  type: string
                  description: 공격을 진행할 inp data set
              required:
                - attackJudgeUUID
                - attackProbNum
                - attackDataSet
      responses:
        '200':
          description: attStatus 가 Success 일 때 공격성공(방어실패), Fail 일 때가 공격실패(방어성공)
          content:
            application/json:
              schema:
                type: object
                example:
                  status: 200
                  attStatus:
                    \[Success || Fail\]

# === Problem ======================================================================
  /problem:
    get:
      security:
        - BearerAuth: []
      tags:
        - Problem
      summary: 문제들 보여주는 api
      description: orderForm, pageCnt, contentsCnt
      parameters:
        - in: query
          name: pageNum
          schema:
            type: integer
          description: 페이지 번호
          required: true
        - in: query
          name: orderForm
          schema:
            type: string
            enum:
              - desc
              - asc
              - DESC
              - ASC
            default: asc
          description: 오름차순 내림차순-> asc desc 
          required: true
        - in: query
          name: contentsCnt
          schema:
            type: integer
          description: 한페이지당 보여지는 문제 개수
          required: true

      responses:
        '200':
            $ref: '#/components/responses/200'
  
    post:
      security:
        - BearerAuth: []
      tags:
        - Problem
      summary: 문제 생성하는 api
      description: 문제 생성하는 api --> 파일들 저장하는 것은 multer path 관련 이슈로 다 따로 빼 두었음
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                prob_name:
                  type: string
                  description: 문제 이름 필드
                time_limit:
                  type: number
                  description: 문제별로 할당된 시간 제한
                correct_code:
                  type: string
                  description: 문제별로 할당된 시간 제한
              required:
                - prob_name
                - time_limit
                - correct_code
      responses:
        '200':
            $ref: '#/components/responses/200'
  /problem/pdf:
    post:
      tags:
        - Problem
      security:
        - BearerAuth : []
      summary: pdf 파일 저장하는 api
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                pdf:
                  type: array
                  items:
                    type: string
                    format: binary
                    description: pdf 파일 업로드 공간
              required:
                - pdf
      responses:
        '200':
          $ref: '#/components/responses/200'
      
  /problem/inp:
    post:
      tags:
        - Problem
      security:
        - BearerAuth : []
      summary: inp 파일들 저장하는 api
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                pdf:
                  type: array
                  items:
                    type: string
                    format: binary
                    description: pdf 파일 업로드 공간
              required:
                - pdf
      responses:
        '200':
          $ref: '#/components/responses/200'

  /problem/out:
    post:
      tags:
        - Problem
      security:
        - BearerAuth : []
      summary: out 파일들 저장하는 api
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                pdf:
                  type: array
                  items:
                    type: string
                    format: binary
                    description: pdf 파일 업로드 공간
              required:
                - pdf
      responses:
        '200':
          $ref: '#/components/responses/200'
  /problem/{probNum}:
    delete:
      security:
        - BearerAuth: []
      tags:
        - Problem
      summary: 자신이 작성한 게시물중 하나 삭제하는 api
      description: probNum으로 삭제하는데 모든 폴더를 삭제함으로 한 번 팝업창으로 한 번 띄워줄 필요가 있음
      parameters:
        - in: path
          name: probNum
          required: true
          description: 문제 번호로 삭제
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/200'

# === Board ==============================================================

  /board:

    post:
      security:
        - BearerAuth: []
      tags:
        - Board
      summary: 게시판 글 생성하는 api
      description: 게시판 글 작성 api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 문제 이름 필드
                main_text:
                  type: number
                  description: 문제별로 할당된 시간 제한
              required:
                - title
                - main_text
      responses:
        '200':
            $ref: '#/components/responses/200'
    get:
      security:
        - BearerAuth: []
      tags:
        - Board 
      summary: 게시판 보여주는 api --> 페이지네이션 포함
      description: orderForm, pageCnt, contentsCnt
      parameters:
        - in: query
          name: pageNum
          schema:
            type: integer
          description: 페이지 번호
          required: true
        - in: query
          name: orderForm
          schema:
            type: string
            enum:
              - desc
              - asc
              - DESC
              - ASC
            default: asc
          description: 오름차순 내림차순-> asc desc 
          required: true
        - in: query
          name: contentsCnt
          schema:
            type: integer
          description: 한페이지당 보여지는 문제 개수
          required: true

      responses:
        '200':
            $ref: '#/components/responses/200'

    

      
            
  /board/{b_id}:
    get:
      security:
        - BearerAuth: []
      tags:
        - Board 
      summary: 게시판 보여주는 api --> 1개만 상세히 보여주는 api
      description: board 의 b_id 로 조회해서 게시물 상세조회
      parameters:
        - in: path
          name: b_id
          required: true
          description: this is id
          schema:
            type: integer

      responses:
        '200':
            $ref: '#/components/responses/200'
    
    delete:
      security:
        - BearerAuth: []
      tags:
        - Board
      summary: 자신이 작성한 게시물중 하나 삭제하는 api
      description: b_id 로 삭제하는데 쿠키에 담긴 token 값이랑 b_id 에 해당하는 user_uuid 비교해서 일치하면 삭제 진행
      parameters:
        - in: path
          name: b_id
          required: true
          description: 문제 번호로 삭제
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/200'

# === components =========================================================
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    '200':
      description: ok
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
            example:
              status: 200
    '400':
      description: bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
              msg:
                type: string
            example:
              status: 400
              msg: bad request
    '401':
      description: invalid token
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
              msg:
                type: string
            example:
              status: 401
              msg: 인증 오류

    '403':
      description: 권한 없음
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
              msg:
                type: string
            example:
              status: 403
              msg: 권한 없음

    '500':
      description: 서버 에러
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
              msg:
                type: string
            example:
              status: 500
              msg: 서버 에러
